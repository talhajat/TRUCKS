
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TruckScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vehicleId: 'vehicleId',
  name: 'name',
  vin: 'vin',
  make: 'make',
  model: 'model',
  year: 'year',
  color: 'color',
  engineMake: 'engineMake',
  engineModel: 'engineModel',
  horsepower: 'horsepower',
  transmissionType: 'transmissionType',
  numGears: 'numGears',
  ownershipType: 'ownershipType',
  purchaseDate: 'purchaseDate',
  leaseEndDate: 'leaseEndDate',
  purchasePrice: 'purchasePrice',
  licensePlate: 'licensePlate',
  issuingState: 'issuingState',
  registrationExp: 'registrationExp',
  insurancePolicy: 'insurancePolicy',
  insuranceExp: 'insuranceExp',
  jurisdiction: 'jurisdiction',
  gvwr: 'gvwr',
  gcwr: 'gcwr',
  dotNumber: 'dotNumber',
  status: 'status',
  currentLocation: 'currentLocation',
  assignedYardId: 'assignedYardId',
  odometer: 'odometer',
  odometerUnit: 'odometerUnit',
  engineHours: 'engineHours',
  currentDriverId: 'currentDriverId',
  attachedTrailerId: 'attachedTrailerId',
  currentLoadId: 'currentLoadId',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.TrailerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trailerId: 'trailerId',
  name: 'name',
  vin: 'vin',
  year: 'year',
  trailerType: 'trailerType',
  length: 'length',
  capacity: 'capacity',
  axleCount: 'axleCount',
  status: 'status',
  currentLocation: 'currentLocation',
  assignedYardId: 'assignedYardId',
  attachedTruckId: 'attachedTruckId',
  currentLoadId: 'currentLoadId',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  driverId: 'driverId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  status: 'status',
  operatingBaseCity: 'operatingBaseCity',
  operatingBaseState: 'operatingBaseState',
  assignedFleetId: 'assignedFleetId',
  currentLoadId: 'currentLoadId',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.LoadScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loadId: 'loadId',
  reference: 'reference',
  status: 'status',
  trackingNumber: 'trackingNumber',
  customerId: 'customerId',
  customerName: 'customerName',
  originAddress: 'originAddress',
  originLat: 'originLat',
  originLng: 'originLng',
  destinationAddress: 'destinationAddress',
  destinationLat: 'destinationLat',
  destinationLng: 'destinationLng',
  scheduledPickup: 'scheduledPickup',
  scheduledDelivery: 'scheduledDelivery',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  locationId: 'locationId',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  locationType: 'locationType',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.TruckDocumentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  documentType: 'documentType',
  fileName: 'fileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  description: 'description',
  uploadedBy: 'uploadedBy',
  truckId: 'truckId',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TransmissionType = exports.$Enums.TransmissionType = {
  MANUAL: 'MANUAL',
  AUTOMATIC: 'AUTOMATIC',
  AUTOMATED_MANUAL: 'AUTOMATED_MANUAL'
};

exports.OwnershipType = exports.$Enums.OwnershipType = {
  OWNED: 'OWNED',
  LEASED: 'LEASED',
  RENTED: 'RENTED'
};

exports.TruckStatus = exports.$Enums.TruckStatus = {
  available: 'available',
  assigned: 'assigned',
  maintenance: 'maintenance',
  out_of_service: 'out_of_service'
};

exports.DistanceUnit = exports.$Enums.DistanceUnit = {
  MILES: 'MILES',
  KILOMETERS: 'KILOMETERS'
};

exports.TrailerStatus = exports.$Enums.TrailerStatus = {
  AVAILABLE: 'AVAILABLE',
  ASSIGNED: 'ASSIGNED',
  MAINTENANCE: 'MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE'
};

exports.DriverStatus = exports.$Enums.DriverStatus = {
  AVAILABLE: 'AVAILABLE',
  DRIVING: 'DRIVING',
  ON_BREAK: 'ON_BREAK',
  LOADING: 'LOADING',
  UNLOADING: 'UNLOADING',
  MAINTENANCE: 'MAINTENANCE',
  AWAY: 'AWAY',
  OFF_DUTY: 'OFF_DUTY'
};

exports.LoadStatus = exports.$Enums.LoadStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_TRANSIT: 'IN_TRANSIT',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.LocationType = exports.$Enums.LocationType = {
  YARD: 'YARD',
  TERMINAL: 'TERMINAL',
  SHOP: 'SHOP',
  CUSTOMER_SITE: 'CUSTOMER_SITE',
  DROP_YARD: 'DROP_YARD'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  VEHICLE_TITLE: 'VEHICLE_TITLE',
  LEASE_AGREEMENT: 'LEASE_AGREEMENT',
  REGISTRATION: 'REGISTRATION',
  INSURANCE_CERTIFICATE: 'INSURANCE_CERTIFICATE',
  INSPECTION_REPORT: 'INSPECTION_REPORT'
};

exports.Prisma.ModelName = {
  Truck: 'Truck',
  Trailer: 'Trailer',
  Driver: 'Driver',
  Load: 'Load',
  Location: 'Location',
  TruckDocument: 'TruckDocument'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
